Перем ПараметрыРаспределенияЗатрат; 
Перем ПараметрыУказанияСерий;
Перем ПараметрыВыбораСпецификаций;
Перем КэшированныеЗначения;
Перем Заливка;
Перем Печь1;
Перем Печь2;
Перем ПорезанныеБлоки;
Перем Газоблоки;
Перем ЦеховаяКладовая;
Перем СписокГрупп;
Перем Бригада;

&После("ОбработкаЗаполнения")
Процедура Расш_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаполнениеКладовщиком") Тогда
		
		Дата            = ДанныеЗаполнения.Дата;
		Заливка         = ДанныеЗаполнения.Заливка;
		Печь1           = ДанныеЗаполнения.Печь1;
		Печь2           = ДанныеЗаполнения.Печь2;
		Газоблоки       = ДанныеЗаполнения.Газоблоки;
		
		ПорезанныеБлоки = ДанныеЗаполнения.ПорезанныеБлоки;
		ЦеховаяКладовая = ДанныеЗаполнения.ЦеховаяКладовая;		
		Бригада         = ДанныеЗаполнения.Бригада;
		Подразделение   = ДанныеЗаполнения.Подразделение;
		Этапы           = ДанныеЗаполнения.Этапы;
		
		НомерСтроки = 1;
		Для каждого Этап Из Этапы Цикл
			
			Для каждого ТекСтр Из ДанныеЗаполнения[Этап] Цикл
				
				Если ЗначениеЗаполнено(ТекСтр.КоличествоУпаковок) Тогда
					
					ТекущаяСтрока                      = ВыходныеИзделия.Добавить(); 
					ТекущаяСтрока.Получатель           = ДанныеЗаполнения.ЦеховаяКладовая;
					ТекущаяСтрока.Номенклатура         = ТекСтр.Номенклатура;
					ТекущаяСтрока.Характеристика       = ТекСтр.Характеристика;
					ТекущаяСтрока.КоличествоУпаковок   = ТекСтр.КоличествоУпаковок;				
					ТекущаяСтрока.Упаковка             = ТекСтр.Упаковка;			                     
					ТекущаяСтрока.ДоляСтоимости        = 100;
					ТекущаяСтрока.Подразделение        = Подразделение;
					ТекущаяСтрока.НомерГруппыЗатрат    = НомерСтроки;
					
					ТаблицаНоменклатураПриИзменении(ТекущаяСтрока, "ВыходныеИзделия", "Получатель");
					
					Если ТекущаяСтрока.Номенклатура.ВидНоменклатуры <> Газоблоки Тогда	
						ТекущаяСтрока.Характеристика       = ТекСтр.Характеристика;	
					КонецЕсли;
									
					НомерСтроки = НомерСтроки + 1; 
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбновитьСписокГруппЗатрат(СписокГрупп);
		
		ДополнитьПоСпецификацииНаСервере("МатериалыИРаботы"); 
		
		ДополнитьПоСпецификацииНаСервере("Трудозатраты"); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика КАК Характеристика,
		|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВыходныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
		|	ВыходныеИзделия.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТЗаливка
		|ИЗ
		|	&ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Номенклатура = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаливка.Номенклатура КАК Номенклатура,
		|	ВТЗаливка.Характеристика КАК Характеристика,
		|	ВТЗаливка.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТЗаливка.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
		|	ВТЗаливка.Упаковка КАК Упаковка
		|ИЗ
		|	ВТЗаливка КАК ВТЗаливка";
		
		Запрос.УстановитьПараметр("ВыходныеИзделия", ВыходныеИзделия.Выгрузить());
		Запрос.УстановитьПараметр("Номенклатура", Заливка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаЗаливка = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаЗаливка.Следующий() Цикл
			
			Запрос = Новый Запрос;
			
			ТекстЗапросаВидРабот(Запрос);
			
			Если СтрНайти(ВыборкаЗаливка.Упаковка.Наименование, "30") Тогда
				
				Запрос.УстановитьПараметр("Тел30", "%30%");
				
			ИначеЕсли СтрНайти(ВыборкаЗаливка.Упаковка.Наименование, "60") Тогда
				
				Запрос.УстановитьПараметр("Тел60", "%60%");
				
			ИначеЕсли СтрНайти(ВыборкаЗаливка.Упаковка.Наименование, "60") Тогда	
				
				Запрос.УстановитьПараметр("Тел90", "%90%");
				
			КонецЕсли; 
			
			Если ВыборкаЗаливка.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Справочник.ХарактеристикиНоменклатуры", 
				"11342b89-962d-11ec-a234-ac1f6be2fed5")  Тогда
				
				Запрос.УстановитьПараметр("Брак", "%брак%");
				
			ИначеЕсли ВыборкаЗаливка.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Справочник.ХарактеристикиНоменклатуры", 
				"09462966-962d-11ec-a234-ac1f6be2fed5")  Тогда
				
				Запрос.УстановитьПараметр("ВысшийСорт", "%в/с%");
				
			ИначеЕсли ВыборкаЗаливка.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Справочник.ХарактеристикиНоменклатуры", 
				"09462967-962d-11ec-a234-ac1f6be2fed5") Тогда	
				
				Запрос.УстановитьПараметр("ПервыйСорт", "%1/с%");
				
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найден вид работы для заполнения закладки ""Трудозатраты""";
				Сообщение.Сообщить();
				
			Иначе 
				
				Если Выборка.Следующий() Тогда
					
					ТекущаяСтрока                      = Трудозатраты.Добавить(); 
					ТекущаяСтрока.Подразделение        = Подразделение;
					ТекущаяСтрока.ВидРабот             = Выборка.Ссылка;
					ТекущаяСтрока.Количество           = ВыборкаЗаливка.КоличествоУпаковок;
					ТекущаяСтрока.СтатьяКалькуляции    = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Справочник.СтатьиКалькуляции", 
					"b8e94fa3-a6cb-11e9-8d60-d850e65181da");
					ТекущаяСтрока.Исполнитель          = Бригада;
					ТекущаяСтрока.НомерГруппыЗатрат    = ВыборкаЗаливка.НомерГруппыЗатрат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаНоменклатураПриИзменении(ТекущаяСтрока, ИмяТЧ, ИмяСклад)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ИмяТЧ, ТекущаяСтрока, ЭтотОбъект, СтруктураДействий);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтотОбъект, СтруктураДействий);
	
	ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, ТекущаяСтрока[ИмяСклад], ПараметрыУказанияСерий[ИмяТЧ]);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(Дата, Подразделение, ПараметрыВыбораСпецификаций);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		
		Если ТекущаяСтрока.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Справочник.ХарактеристикиНоменклатуры", 
			"11342b89-962d-11ec-a234-ac1f6be2fed5") Тогда
			
			ТекущаяСтрока.НаправлениеВыпуска   = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
			ТекущаяСтрока.АналитикаРасходов    = Печь1;
			ТекущаяСтрока.Получатель    = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("ПланВидовХарактеристик.СтатьиРасходов", 
			"37d1b698-ec47-11ea-a204-ac1f6be2fed5");
			
		Иначе 
			
			ТекущаяСтрока.НаправлениеВыпуска   = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			
			Если ТекущаяСтрока.Номенклатура = Заливка  Тогда
				ТекущаяСтрока.Получатель = Печь1;
			ИначеЕсли ТекущаяСтрока.Номенклатура = ПорезанныеБлоки Тогда
				ТекущаяСтрока.Получатель = Печь2;	
			Иначе 
				ТекущаяСтрока.Получатель = ЦеховаяКладовая;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТЧ = "МатериалыИРаботы"
		И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущаяСтрока.Склад = Неопределено;
		ТекущаяСтрока.ЦеховаяКладовая = Ложь;
		Если ТекущаяСтрока.Номенклатура = ПорезанныеБлоки Тогда
			ТекущаяСтрока.Получатель = Печь2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ИмяТЧ, ТекущаяСтрока, Объект, СтруктураДействий)
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
	КонецЕсли;
	
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	//СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
	//Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
	//Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураПараметров = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураПараметров.Вставить("ВидЦены", ВидЦены);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураПараметров);
		
		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	КонецЕсли;
	
КонецПроцедуры  

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтотОбъект, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Склад, ПараметрыУказанияСерий)
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(						    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьСтатьюАналитикуРасходов(                      		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакиПартииТМЦВЭксплуатации(                	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(                           											ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(      		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(							    	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(                            		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(                      											ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(                		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                  		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                 		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(                  		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(                                     		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(                     		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(             		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(           		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(                 		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(                  		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации(      		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(              		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(            		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакиКатегорииЭксплуатации(                		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(                          ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(                           ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(                                       ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(                  ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(                 ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(                 		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМаркиДляСтрокиТабличнойЧасти(                  ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости(                    ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой(             ТекущаяСтрока, СтруктураДействий);
	ПроверитьЗаполнитьСпецификацию(                                                                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДатуПроизводства(                                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакЦеховаяКладовая(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьДолюСтоимости(                                                                ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьДолюСтоимостиВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипСклада(                                         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("Склад") И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСпецификацию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоля = ПараметрыЗаполнения.ИмяПоляСпецификация;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ДанныеСпецификации = СпецификацияИзделия(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			ПараметрыЗаполнения.Дата,
			ПараметрыЗаполнения.Подразделение,
			ПараметрыЗаполнения.ПараметрыВыбораСпецификаций,
			ТекущаяСтрока[ИмяПоля]);
			
			Если ДанныеСпецификации <> Неопределено Тогда
				ТекущаяСтрока[ИмяПоля] = ДанныеСпецификации.Спецификация;
			Иначе
				ТекущаяСтрока[ИмяПоля] = Неопределено;
			КонецЕсли;
			
			Если ПараметрыЗаполнения.ЕстьПризнакОсновная Тогда
				Если ДанныеСпецификации <> Неопределено Тогда
					ТекущаяСтрока.ОсновнаяСпецификация        = ДанныеСпецификации.ОсновнаяСпецификация;
					ТекущаяСтрока.ВыбранаОсновнаяСпецификация = ДанныеСпецификации.ВыбранаОсновнаяСпецификация;
				Иначе
					ТекущаяСтрока.ОсновнаяСпецификация        = Неопределено;
					ТекущаяСтрока.ВыбранаОсновнаяСпецификация = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		#Иначе
			ТекстИсключения = НСтр("ru = 'Попытка заполнения спецификации на клиенте.'");
			ВызватьИсключение ТекстИсключения;
		#КонецЕсли
	Иначе
		ТекущаяСтрока[ИмяПоля] = Неопределено;
		Если ПараметрыЗаполнения.ЕстьПризнакОсновная Тогда
			ТекущаяСтрока.ОсновнаяСпецификация        = Неопределено;
			ТекущаяСтрока.ВыбранаОсновнаяСпецификация = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СпецификацияИзделия(Номенклатура, Характеристика, НачатьНеРанее, Подразделение, ПараметрыВыбораСпецификаций, ТекущаяСпецификация = Неопределено) Экспорт
	
	ДанныеСпецификации = Неопределено;
	СтрокаТекущаяСпецификация = Неопределено;
	
	СписокСпецификаций = УправлениеДаннымиОбИзделиях.СпецификацииИзделия(
	Номенклатура,
	Характеристика,
	НачатьНеРанее,
	Подразделение,
	ПараметрыВыбораСпецификаций);
	
	Если СписокСпецификаций.ВГраница() <> -1 Тогда
		
		СпецификацияПоУмолчанию = СписокСпецификаций[0];
		
		Если ЗначениеЗаполнено(ТекущаяСпецификация) Тогда
			Для каждого СтрокаСпецификация Из СписокСпецификаций Цикл
				Если СтрокаСпецификация.Спецификация = ТекущаяСпецификация Тогда
					СтрокаТекущаяСпецификация = СтрокаСпецификация;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Если выбрана текущая спецификация, то вернем ее, в случае если она есть в списке доступных.
		Если СтрокаТекущаяСпецификация <> Неопределено Тогда
			
			ДанныеСпецификации = СтрокаТекущаяСпецификация;
			ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", (СпецификацияПоУмолчанию.ОсновнаяСпецификация И СпецификацияПоУмолчанию.Спецификация = ТекущаяСпецификация));
			
		ИначеЕсли СпецификацияПоУмолчанию.ОсновнаяСпецификация ИЛИ СписокСпецификаций.Количество() = 1 Тогда
			
			ДанныеСпецификации = СпецификацияПоУмолчанию;
			ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", СпецификацияПоУмолчанию.ОсновнаяСпецификация);
			
		Иначе 
			
			Если Номенклатура = ПорезанныеБлоки Тогда 
				
				мсвСпец = Новый Массив;
				Для каждого Элем Из СписокСпецификаций Цикл
					
					мсвСпец.Добавить(Элем.Спецификация);
					
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
				|ГДЕ
				|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка В(&мсвСпец)
				|	И РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = &Номенклатура";
				
				Запрос.УстановитьПараметр("Номенклатура", Заливка);
				Запрос.УстановитьПараметр("мсвСпец", мсвСпец);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл					
					ДанныеСпецификации = СпецификацияПоУмолчанию;
					ДанныеСпецификации.Спецификация = ВыборкаДетальныеЗаписи.Ссылка;
					ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

Процедура ПроверитьЗаполнитьДолюСтоимости(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ПроверитьЗаполнитьДолюСтоимости", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(ТекущаяСтрока, ПроизводствоКлиентСервер.СтруктураПолейДоляСтоимости());
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоСпецификацииНаСервере(ИмяТЧ)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаМатериалыПоГруппамЗатрат();
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаВозвратныеОтходыПоГруппамЗатрат();
	Иначе
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаТрудозатратыПоГруппамЗатрат();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ЗаполнятьАвтоматически", Истина);
	
	// Подготовим таблицу продукции
	ПоляГруппировки = "НомерГруппыЗатрат, НаправлениеВыпуска, Получатель,
	|	Номенклатура, Характеристика, Серия,
	|	Назначение, Спецификация, Упаковка";
	ПоляСуммирования = "Количество, КоличествоУпаковок";
	
	ТаблицаПродукции = ВыходныеИзделия.Выгрузить(, ПоляГруппировки + ", " + ПоляСуммирования);
	ТаблицаПродукции.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	ТаблицаПродукции.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПродукции.Колонки.Добавить("ГруппировкаЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппировкиЗатратВПроизводствеБезЗаказа"));
	ТаблицаПродукции.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаПродукции.Колонки.Добавить("ОшибкаВНастройкахМодели", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПродукции.ЗаполнитьЗначения(Организация,			"Организация");
	ТаблицаПродукции.ЗаполнитьЗначения(ГруппировкаЗатрат,	"ГруппировкаЗатрат");
	ТаблицаПродукции.ЗаполнитьЗначения(Подразделение,		"Подразделение");
	
	// Подготовим параметры заполнения
	ДанныеШапки = Новый Структура("Дата", Дата);
	
	ПараметрыЗаполнения = Новый Структура("ДанныеШапки",	ДанныеШапки);
	ПараметрыЗаполнения.Вставить("ЗаполнятьАвтоматически",	Истина);
	
	ПереченьДанных = Новый Массив;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ПереченьДанных.Добавить("ВозвратныеОтходы");
	ИначеЕсли ИмяТЧ = "МатериалыИРаботы" Тогда
		ПереченьДанных.Добавить("МатериалыИУслуги");
	Иначе
		ПереченьДанных.Добавить("Трудозатраты");
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ПереченьДанных", ПереченьДанных);
	
	// Получим данные спецификаций и поместим их в ВТ.
	Документы.ПроизводствоБезЗаказа.ДанныеСпецификацииПоСпискуПродукции(ТаблицаПродукции,
	ПараметрыЗаполнения,																		МенеджерВременныхТаблиц);
	
	// Заполним затраты
	ТаблицаЗатрат = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаЗатрат.Количество() = 0 Тогда
		
		Если ИмяТЧ = "МатериалыИРаботы"
			ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураДействий = Новый Структура;
		КонецЕсли; 
		
		МассивСтрок = Новый Массив;
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", 0);
		
		Для Каждого ТекЗатрата Из ТаблицаЗатрат Цикл
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЗатрата);
			
			НоваяСтрока.Подразделение = Подразделение;
			
			Если ИмяТЧ = "МатериалыИРаботы" Тогда
				
				Если ТекЗатрата.Номенклатура = Заливка Тогда
					НоваяСтрока.Склад = Печь1;
				ИначеЕсли ТекЗатрата.Номенклатура = ПорезанныеБлоки Тогда
					НоваяСтрока.Склад = Печь2;	
				Иначе 
					НоваяСтрока.Склад = ЦеховаяКладовая;		
				КонецЕсли; 
				
				Если ТекЗатрата.Номенклатура.ВидНоменклатуры = Газоблоки Тогда	
					НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
				КонецЕсли;
								
			КонецЕсли; 
			
			Если ИмяТЧ = "Трудозатраты" Тогда
				
				НоваяСтрока.Исполнитель = Бригада;   					
				
			КонецЕсли;
			
			СтруктураПоиска.НомерГруппыЗатрат = НоваяСтрока.НомерГруппыЗатрат;
			ГруппаЗатрат = СписокГрупп.НайтиСтроки(СтруктураПоиска);
			
			Если Не ГруппаЗатрат.Количество() = 0 Тогда
				НоваяСтрока.НомерГруппыЗатрат = ТекЗатрата.НомерГруппыЗатрат;
				
				Если Не ИмяТЧ = "Трудозатраты" Тогда
					//НоваяСтрока.НаправлениеДеятельности = ГруппаЗатрат[0].НаправлениеДеятельности;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ИмяТЧ = "Трудозатраты" Тогда
				ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ИмяТЧ, 
				НоваяСтрока, 
				ЭтотОбъект, 
				СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
			МассивСтрок.Добавить(НоваяСтрока.НомерСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокГруппЗатрат(СписокГрупп)
	
	СписокПолей = Документы.ПроизводствоБезЗаказа.ПереченьПолейГруппыЗатрат(ГруппировкаЗатрат);
	
	ТекстПоляВыбораВТ = Документы.ПроизводствоБезЗаказа.ТекстЗапросаПоПолямГруппыЗатрат("ТаблицаДанных", СписокПолей);
	ТекстПоляВыбора = ТекстПоляВыбораВТ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ТаблицаДанных.НомерГруппыЗатрат
	|	,&ТекстПоляВыбораВТ
	|ПОМЕСТИТЬ ВТ_ГруппыЗатрат
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных;
	|ВЫБРАТЬ
	|	ТаблицаДанных.НомерГруппыЗатрат
	|	,&ТекстПоляВыбора
	|ИЗ
	|	ВТ_ГруппыЗатрат КАК ТаблицаДанных
	|;
	|/////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ГруппыЗатрат.НомерГруппыЗатрат) КАК НомерГруппыЗатрат
	|ИЗ
	|	ВТ_ГруппыЗатрат КАК ВТ_ГруппыЗатрат";	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям
		ИЛИ ГруппировкаЗатрат =
		Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям Тогда
		ТекстПоляВыбора = ТекстПоляВыбора +
		", ВЫРАЗИТЬ(ТаблицаДанных.Назначение КАК Справочник.Назначения).НаправлениеДеятельности КАК НаправлениеДеятельности";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ВыходныеИзделия.Выгрузить());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ТекстПоляВыбораВТ", ТекстПоляВыбораВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ТекстПоляВыбора", ТекстПоляВыбора);
	Результат = Запрос.ВыполнитьПакет();
	
	СписокГрупп = Результат[1].Выгрузить(); 
	
КонецПроцедуры   

Функция ТекстЗапросаВидРабот(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРаботСотрудников.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &ВысшийСорт
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК ВысшийСорт,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &ПервыйСорт
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК ПервыйСорт,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Брак
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Брак,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел30
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Тел30,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел60
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Тел60,
	|	ВЫБОР
	|		КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел90
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Тел90
	|ИЗ
	|	Справочник.ВидыРаботСотрудников КАК ВидыРаботСотрудников
	|ГДЕ
	|	(ВидыРаботСотрудников.Наименование ПОДОБНО &Заливка
	|				И ВидыРаботСотрудников.Родитель.Наименование = &Наименование
	|				И ВЫБОР
	|					КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел30
	|						ТОГДА ИСТИНА
	|				КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел60
	|					ТОГДА ИСТИНА
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Тел90
	|					ТОГДА ИСТИНА
	|			КОНЕЦ)
	|	И (ВЫБОР
	|				КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &ВысшийСорт
	|					ТОГДА ИСТИНА
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &ПервыйСорт
	|					ТОГДА ИСТИНА
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ВидыРаботСотрудников.Наименование ПОДОБНО &Брак
	|					ТОГДА ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("Брак", "");
	Запрос.УстановитьПараметр("ВысшийСорт", "");
	Запрос.УстановитьПараметр("ПервыйСорт", "");
	
	Запрос.УстановитьПараметр("Тел30", "");
	Запрос.УстановитьПараметр("Тел60", "");
	Запрос.УстановитьПараметр("Тел90", "");
	
	Запрос.УстановитьПараметр("Заливка", "%Заливка%");
	Запрос.УстановитьПараметр("Наименование", "Цех 1");
	
КонецФункции

ПараметрыРаспределенияЗатратСтруктура = Документы.ПроизводствоБезЗаказа.ПараметрыРаспределенияЗатрат(ЭтотОбъект);
ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);

ПараметрыУказанияСерий =
Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводствоБезЗаказа)); 

ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(ЭтотОбъект, Документы.ПроизводствоБезЗаказа);