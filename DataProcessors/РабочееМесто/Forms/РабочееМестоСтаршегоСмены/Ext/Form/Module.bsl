#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")); 
	
	Источники = Новый ОписаниеТипов(Массив);
	ПараметрыРазмещения = Новый Структура;
	ПараметрыРазмещения.Вставить("Источники", Источники);
	ПараметрыРазмещения.Вставить("ПрефиксГрупп", "");
	ПараметрыРазмещения.Вставить("КоманднаяПанель", Элементы.СписокДокументов.КоманднаяПанель);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Кладовая1 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "1eb17a6c-bb4d-11ea-85c1-d850e65181da"); //Кладовая 1
	Кладовая2 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "057ba585-d6cb-11ea-a200-ac1f6be2fed5"); //Кладовая 2
		
	Элементы.ЦеховаяКладовая.СписокВыбора.Добавить(Кладовая1, Кладовая1);
	Элементы.ЦеховаяКладовая.СписокВыбора.Добавить(Кладовая2, Кладовая2);
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса());
	
	//Бригады		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бригады.Ссылка КАК Ссылка,
	|	Бригады.Представление КАК Представление
	|ИЗ
	|	Справочник.Бригады КАК Бригады
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.Бригада.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
			
	УправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	Элементы.МатериалыПодразделение.Видимость = НЕ УправлениеПроизводством2_2;
	Элементы.МатериалыЦеховаяКладовая.Видимость = УправлениеПроизводством2_2;
	
	НачалоТекущегоДня = Объект.Дата;
	
	//УчитыватьСуществующиеЗаказы = Истина;
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПолуфабрикатыИМатериалыСпецификация, ПараметрыВыбораСпецификаций);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокДокументов,
	"Ссылка",
	СформированныеДокументы,
	ВидСравненияКомпоновкиДанных.ВСписке,
	,
	Истина);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокДокументов);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокДокументов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокДокументов);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчитыватьПрошлыеЗаказыПриИзменении(Элемент)
	
	УчитыватьПрошлыеЗаказыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолуфабрикатыИМатериалы

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипСтроки = 1 Тогда
		//ТекущиеДанные.Выбран = Ложь;
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		ТекущиеДанные.Разузлован = Истина;
		//УчитыватьСуществующиеЗаказы = Ложь;
		ЗаполнитьМатериалыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыПроизводитсяВПроцессеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.НомерКартинки = 6;
	Иначе
		ТекущиеДанные.Спецификация = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
		ТекущиеДанные.НомерКартинки = 0;
		ТекущиеДанные.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		Иначе
			ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		Если ТекущиеДанные.Выбран > 0 Тогда
			ТекущиеДанные.Выбран = 1;
		КонецЕсли;
		
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		ТекущиеДанные.Разузлован = Истина;
		
		Элементы.ПолуфабрикатыИМатериалы.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		
	Иначе
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		ТекущиеДанные.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0;
	КонецЕсли;
	
	ВыбранПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

//&НаКлиенте
//Процедура МатериалыВыбранПриИзменении(Элемент)
//	
//	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
//	
//	Если ТекущиеДанные.Выбран Тогда
//		ТекущиеДанные.КоличествоУпаковокЗаказать = ТекущиеДанные.КоличествоУпаковок - ТекущиеДанные.КоличествоУпаковокЗаказано;
//		ТекущиеДанные.КоличествоЗаказать = ТекущиеДанные.Количество - ТекущиеДанные.КоличествоЗаказано;
//	Иначе
//		ТекущиеДанные.КоличествоУпаковокЗаказать = 0;
//		ТекущиеДанные.КоличествоЗаказать = 0;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокЗаказатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Заказать");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.КоличествоУпаковокЗаказать = 0 Тогда
		ТекущиеДанные.Выбран = Ложь;
	Иначе
		ТекущиеДанные.Выбран = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНачалоОтгрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные.НачалоОтгрузки < НачалоТекущегоДня Тогда
		ТекущиеДанные.НачалоОтгрузки = НачалоТекущегоДня;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(0);
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура Далее(Команда)
//	
//	//ОчиститьСообщения();
//	
//	Если Команда.Имя = "СтраницаПродукция" Тогда
//		НоваяСтраница = "СтраницаМатериалы";
//	Иначе
//		НоваяСтраница = "СтраницаДокументы";
//	КонецЕсли;

//	Результат = ПриСменеСтраницыНаСервере(Команда.Имя, НоваяСтраница);
//	
//	Если Результат <> Неопределено Тогда
//		ПоказатьОповещениеПользователя(Результат.ТекстОповещения, , Результат.ПояснениеОповещения);
//	КонецЕсли;
//	
//КонецПроцедуры 

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	СформироватьЗаказыНаСервере();
	
	Если СформированныеДокументы.Количество() > 0 Тогда
		
		ТекстОповещения = НСтр("ru = 'Заказы созданы'");
		ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего сформировано заказов: %1'"),
		СформированныеДокументы.Количество());
		
		Результат = Новый Структура("ТекстОповещения, ПояснениеОповещения", ТекстОповещения, ПояснениеОповещения);
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ПоказатьОповещениеПользователя(Результат.ТекстОповещения, , Результат.ПояснениеОповещения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МатериалыОтметитьКЗаказу(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ОтметитьМатериалыКЗаказу(Истина, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСнятьОтметкуКЗаказу(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ОтметитьМатериалыКЗаказу(Ложь, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПродукцию(Команда)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	
	Для каждого Строка Из Строки Цикл
		
		СтрокаРодитель = Строка.ПолучитьРодителя();
		
		Если СтрокаРодитель = Неопределено Тогда
			ПолуфабрикатыИМатериалы.ПолучитьЭлементы().Удалить(Строка);
		Иначе
			СтрокаРодитель.ПолучитьЭлементы().Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуПродукцииНаСервере(); 
	
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМатериалы(Команда)
	
	ЗаполнитьМатериалыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументы(Команда)
	УдалитьДокументыНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Отключение видимости служебной строки.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыВыбран.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНомерКартинки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПодразделение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПроизводитсяВПроцессе.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыГруппаНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыГруппаУпаковкаЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
	"ПолуфабрикатыИМатериалыНоменклатураЕдиницаИзмерения", 
	"ПолуфабрикатыИМатериалы.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
	"МатериалыНоменклатураЕдиницаИзмерения", 
	"Объект.Материалы.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	"ПолуфабрикатыИМатериалыХарактеристика",
	"ПолуфабрикатыИМатериалы.ХарактеристикиИспользуются");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	"МатериалыХарактеристика",
	"Объект.Материалы.ХарактеристикиИспользуются");
	
	// Подразделение не обязательно для заполнения если продукция или полуфабрикат.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Признак производства в процессе только для просмотра, если продукция.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПроизводитсяВПроцессе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Картинка не отображается, если не полуфабрикат.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.НомерКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 6;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Спецификация для полуфабрикатов.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Для полуфабрикатов склад не требуется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	// Если не учитываем прошлые заказы, то колонки не отображаем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличествоУпаковокЗаказано.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчитыватьСуществующиеЗаказы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Заказ на передачу отображается как гиперссылка.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// Пояснение для заказа на передачу, если не созан или создан ранее.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСформированы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<еще не создан или создан ранее>'"));
	
	// Если заказы не сформированы, то колонку с заказом не отображаем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСформированы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Склад для работ не требуется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Для не выбранных строк склад не обязателен
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область ЦеховаяКладовая_Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДокументовЦеховаяКладовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДокументов.УправлениеПроизводством2_2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Функция ПриСменеСтраницыНаСервере(СтараяСтраница, НоваяСтраница)
	
	Результат = Неопределено;
	
	Если НоваяСтраница = "СтраницаМатериалы" И ОбновитьМатериалы Тогда
		
		ЗаполнитьМатериалыНаСервере();
		
		Если Объект.Материалы.Количество() > 0 Тогда
			ТекстОповещения = НСтр("ru = 'Материалы заполнены'");
			ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего к заказу позиций: %1'"),
			Объект.Материалы.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество());
			
			Результат = Новый Структура("ТекстОповещения, ПояснениеОповещения", ТекстОповещения, ПояснениеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтраница = "СтраницаДокументы" И ОбновитьЗаказы Тогда
		
		СформироватьЗаказыНаСервере();
		
		Если СформированныеДокументы.Количество() > 0 Тогда
			
			ТекстОповещения = НСтр("ru = 'Заказы созданы'");
			ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего сформировано заказов: %1'"),
			СформированныеДокументы.Количество());
			
			Результат = Новый Структура("ТекстОповещения, ПояснениеОповещения", ТекстОповещения, ПояснениеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПостроениеИОбслуживаниеДерева

&НаСервере
Процедура ЗаполнитьТаблицуПродукцииНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.Количество,
	|	Товары.Склад,
	|	Товары.НачалоОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) КАК Спецификация,
	|	Товары.ВариантОбеспечения
	|ПОМЕСТИТЬ ВТНоменклатураЗаказа
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ВТНоменклатураЗаказа КАК Таблица
	|;
	|
	|/////////////////////////////////////
	|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
	+ "ВЫБРАТЬ
	|	ВТНоменклатураЗаказа.Номенклатура,
	|	ВТНоменклатураЗаказа.Характеристика,
	|	ВТНоменклатураЗаказа.Количество,
	|	ВТНоменклатураЗаказа.КоличествоУпаковок,
	|	ВТНоменклатураЗаказа.Упаковка,
	|	ВТНоменклатураЗаказа.Склад,
	|	ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.Подразделение КАК Подразделение,
	|	ВТНоменклатураЗаказа.Назначение,
	|	ВТНоменклатураЗаказа.Спецификация,
	|	ВТНоменклатураЗаказа.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВТНоменклатураЗаказа.Номенклатура.ГруппаАналитическогоУчета КАК ГруппаПродукции
	|ИЗ
	|	ВТНоменклатураЗаказа КАК ВТНоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ВариантыОбеспеченияТоварами
	|		ПО ВариантыОбеспеченияТоварами.Номенклатура   = ВТНоменклатураЗаказа.Номенклатура
	|		 И ВариантыОбеспеченияТоварами.Характеристика = ВТНоменклатураЗаказа.Характеристика
	|		 И ВариантыОбеспеченияТоварами.Склад          = ВТНоменклатураЗаказа.Склад
	|ГДЕ
	|	ВТНоменклатураЗаказа.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Товары.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Товары.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Товары.Колонки.Добавить("НачалоОтгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Товары.Колонки.Добавить("ОкончаниеПоступления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекСтр = Товары.Добавить();
	
	Заливка = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Номенклатура", "674382b3-6163-11ec-a227-ac1f6be2fed5"); //Заливка (смесь);
	//Кладовая1 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "1eb17a6c-bb4d-11ea-85c1-d850e65181da"); //Кладовая 1 (старая линия)
	Печь1 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "556062b7-6185-11ec-a227-ac1f6be2fed5"); //ПЕЧЬ1
	
	ТекСтр.Номенклатура = Заливка;
	//Товары.Упаковка = ТекСтр.Упаковка);
	ТекСтр.Склад = Печь1;
	ТекСтр.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("ХарактеристикиНоменклатуры", 
	"75a96e2a-6171-11ec-a227-ac1f6be2fed5");// Высший сорт
	//ТекСтр.Количество = 1;
	//ТекСтр.КоличествоУпаковок = 1;
	ТекСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ТекСтр.НачалоОтгрузки = Объект.Дата;
	ТекСтр.ОкончаниеПоступления = Объект.Дата;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВызватьИсключение НСтр("ru='Отсутствует товар, для которого возможно формирование заказов на передачу материалов в производство.'");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ТекущиеЭлементы = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	НачалоПроизводства = НачалоДня(ТекущаяДатаСеанса());
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Номенклатура",		Выборка.Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика",		Выборка.Характеристика);
		ДанныеПоНоменклатуре.Вставить("Количество",			Выборка.Количество);
		ДанныеПоНоменклатуре.Вставить("Упаковка",			Выборка.Упаковка);
		ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",	НачалоПроизводства);
		ДанныеПоНоменклатуре.Вставить("Подразделение",		Выборка.Подразделение);
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(ТекущиеЭлементы, МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций,, Истина);
	
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Если ЗначениеЗаполнено(Строка.Спецификация) Тогда
			ПостроитьДеревоПродукции(Строка);
			Строка.Разузлован = Истина;
		КонецЕсли;
		Строка.ПроизводитсяВПроцессе = Истина;
		Строка.ТипСтроки = 1;
	КонецЦикла;
	
КонецПроцедуры      

&НаСервере
Процедура ПостроитьДеревоПродукции(Знач Родитель)
	
	Если Не ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") Тогда
		Родитель = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Родитель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель.Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазузлования = Новый Структура("Спецификация, Номенклатура, Характеристика, Количество, ДатаПотребности, Назначение");
	ЗаполнитьЗначенияСвойств(ПараметрыРазузлования, Родитель);
	
	ТаблицаМатериалов = МатериалыСпецификации(ПараметрыРазузлования);
	
	МатериалыЦеховыхКладовых = ТаблицаМатериалов.Скопировать(Новый Структура("ЭтоЦеховаяКладовая, ПроизводитсяВПроцессе", Истина, Ложь), "Номенклатура,Характеристика,Склад");
	МатериалыЦеховыхКладовых.Свернуть("Номенклатура,Характеристика,Склад");
	
	ВыборкаСкладовКладовых = ВыборкаСкладовКладовых(МатериалыЦеховыхКладовых);
	
	ОтборСкладовЦеховыхКладовых = Новый Структура("Номенклатура,Характеристика,Склад");
	
	ТекущиеЭлементы = Родитель.ПолучитьЭлементы();
	ТекущиеЭлементы.Очистить();
	
	ТаблицаМатериалов.Колонки.Добавить("ЦеховаяКладовая");
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		Если Строка.ПроизводствоНаСтороне Тогда
			Продолжить;
		КонецЕсли;
		
		ПроизвестиНаЭтапе = Строка.ПроизводитсяВПроцессе
		И Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе;
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			Или ПроизвестиНаЭтапе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ГруппаПродукции = Родитель.ГруппаПродукции;
		НоваяСтрока.Склад = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "d6268870-9f36-11e9-90f2-d850e65181da");;
		НоваяСтрока.ЦеховаяКладовая = Объект.ЦеховаяКладовая;
		
		НоваяСтрока.Выбран = Родитель.Выбран;
		
		Если НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно 
			Или ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
			НоваяСтрока.Назначение = Родитель.Назначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
			НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
			НоваяСтрока.НомерКартинки = 6;
			ПустаяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ПустаяСтрока.ТипСтроки = -1;
		КонецЕсли;
		
		Если Строка.ЭтоЦеховаяКладовая Тогда
			НоваяСтрока.ЦеховаяКладовая = Строка.Склад;
			НоваяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
			ЗаполнитьЗначенияСвойств(ОтборСкладовЦеховыхКладовых, Строка);
			Если ВыборкаСкладовКладовых.НайтиСледующий(ОтборСкладовЦеховыхКладовых) Тогда
				НоваяСтрока.Склад = ВыборкаСкладовКладовых.СкладОтправитель;
				ВыборкаСкладовКладовых.Сбросить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Родитель.Разузлован = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВыборкаСкладовКладовых(ТоварнаяМатрица)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТоварнаяМатрица", ТоварнаяМатрица);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&ТоварнаяМатрица КАК Т
	|
	|;
	|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ") + "
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад,
	|	Реквизиты.ИсточникОбеспеченияПотребностей КАК СкладОтправитель
	|ИЗ
	|	ВтСпособыОбеспечения КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК Реквизиты
	|	ПО Т.СпособОбеспеченияПотребностей = Реквизиты.Ссылка
	|ГДЕ
	|	Реквизиты.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ВыбранПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	ВыбратьИсключитьСтроки(ТекущиеДанные.Выбран, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если Родитель <> Неопределено Тогда
		ОбновитьВыборРодительскихСтрок(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсключитьСтроки(Выбрать, Идентификатор = Неопределено)
	
	Если Идентификатор = Неопределено Тогда
		ТекущиеЭлементы = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Иначе
		
		ТекущаяСтрока = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
		
		Если ТекущаяСтрока.ПроизводитсяВПроцессе И ЗначениеЗаполнено(ТекущаяСтрока.Спецификация) И Не ТекущаяСтрока.Разузлован Тогда
			ПостроитьДеревоПродукции(ТекущаяСтрока);
		КонецЕсли;
		
		ТекущиеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Строка.Выбран = Выбрать;
		ВыбратьИсключитьСтроки(Выбрать, Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыборРодительскихСтрок(Идентификатор)
	
	ТекущиеДанные = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеЭлементы = Родитель.ПолучитьЭлементы();
	
	ВыбраноСтрок = 0;
	ЕстьЧастичноВыбранныеСтроки = Ложь;
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Если Строка.Выбран = 1 Тогда
			ВыбраноСтрок = ВыбраноСтрок + 1;
		ИначеЕсли Строка.Выбран = 2 Тогда
			ЕстьЧастичноВыбранныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраноСтрок = ТекущиеЭлементы.Количество() Тогда
		Родитель.Выбран = 1;
	ИначеЕсли ВыбраноСтрок = 0 И Не ЕстьЧастичноВыбранныеСтроки Тогда
		Родитель.Выбран = 0;
	Иначе
		Родитель.Выбран = 2;
	КонецЕсли;
	
	ОбновитьВыборРодительскихСтрок(Родитель.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция МатериалыСпецификации(Параметры) Экспорт
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
	Параметры.Спецификация,
	Параметры.Номенклатура,
	Параметры.Характеристика);
	
	ДанныеПоНоменклатуре.Количество = Параметры.Количество;
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности", Параметры.ДатаПотребности);
	ДанныеПоНоменклатуре.Вставить("Назначение", Параметры.Назначение);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
	"МатериалыИУслуги",
	МенеджерВременныхТаблиц, УправлениеПроизводством2_2);
	
	ПараметрыВыборки.ПолучитьСведенияАвтовыбора = Ложь;
	ПараметрыВыборки.ПолучитьПредставления      = Ложь;
	
	ТабличныеЧасти = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
	Возврат ТабличныеЧасти.МатериалыИУслуги;
	
КонецФункции

&НаСервере
Процедура ВыбратьИсключитьВыделенныеСтроки(Выбран)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.Выбран = Выбран;
		
		ВыбратьИсключитьСтроки(Выбран, Строка.ПолучитьИдентификатор());
		ОбновитьВыборРодительскихСтрок(Строка.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ОбновитьЗаказы = Истина;
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСпискаМатериалов

&НаСервере
Процедура ЗаполнитьМатериалыНаСервере()
	
	Объект.Материалы.Очистить();
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	
	Отказ = Ложь;
	ДобавитьМатериалыУровня(ПолуфабрикатыИМатериалы, ТаблицаМатериалов, Отказ);
	
	Если Отказ Тогда
		Объект.Материалы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбновитьМатериалы = Истина;   	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика,
	|	ВТТовары.Упаковка КАК Упаковка,
	|	ВТТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТТовары.Количество КАК Количество,
	|	ВТТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТТовары.Подразделение КАК Подразделение,
	|	ВТТовары.Склад КАК Склад,
	|	ВТТовары.ГруппаПродукции КАК ГруппаПродукции,
	|	ВТТовары.НачалоОтгрузки КАК НачалоОтгрузки,
	|	ВТТовары.ОкончаниеПоступления КАК ОкончаниеПоступления
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ВТТовары
	|;
	|   ВЫБРАТЬ
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Упаковка КАК Упаковка,
	|	ТаблицаМатериалов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаМатериалов.Количество КАК Количество,
	|	ТаблицаМатериалов.Подразделение КАК Подразделение,
	|	ТаблицаМатериалов.ДнейОтПотребности КАК ДнейОтПотребности,
	|	ТаблицаМатериалов.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаМатериалов.Склад КАК Склад,
	|	ТаблицаМатериалов.ЦеховаяКладовая КАК ЦеховаяКладовая,
	|	ТаблицаМатериалов.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаМатериалов.Назначение КАК Назначение,
	|	ТаблицаМатериалов.ГруппаПродукции КАК ГруппаПродукции
	|ПОМЕСТИТЬ ВТМатериалы
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМатериалы.Номенклатура КАК Номенклатура,
	|	ВТМатериалы.Характеристика,
	|	ВТМатериалы.Упаковка,
	|	СУММА(ВТМатериалы.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВТМатериалы.Количество) КАК Количество,
	|	ВТМатериалы.Подразделение,
	|	ВТМатериалы.ГруппаПродукции,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТМатериалы.ДатаПотребности, ДЕНЬ, ВТМатериалы.ДнейОтПотребности), ДЕНЬ) > &НачалоТекущегоДня
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТМатериалы.ДатаПотребности, ДЕНЬ, ВТМатериалы.ДнейОтПотребности), ДЕНЬ)
	|			ИНАЧЕ &НачалоТекущегоДня
	|		КОНЕЦ) КАК НачалоОтгрузки,
	|	ВТМатериалы.Склад,
	|	ВТМатериалы.ЦеховаяКладовая,
	|	ВТМатериалы.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ВТМатериалы.Назначение
	|	КОНЕЦ КАК Назначение
	|ПОМЕСТИТЬ МатериалыКЗаказу
	|ИЗ
	|	ВТМатериалы КАК ВТМатериалы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТМатериалы.Номенклатура,
	|	ВТМатериалы.Характеристика,
	|	ВТМатериалы.Упаковка,
	|	ВТМатериалы.Подразделение,
	|	ВТМатериалы.ГруппаПродукции,
	|	ВТМатериалы.Склад,
	|	ВТМатериалы.ЦеховаяКладовая,
	|	ВТМатериалы.ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ВТМатериалы.Назначение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Подразделение,
	|	Товары.ГруппаПродукции,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	ВТТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Подразделение,
	|	Товары.ГруппаПродукции
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыКЗаказу.Номенклатура КАК Номенклатура,
	|	МатериалыКЗаказу.Характеристика,
	|	МатериалыКЗаказу.Упаковка,
	|	МатериалыКЗаказу.КоличествоУпаковок,
	|	МатериалыКЗаказу.Количество,
	|	МатериалыКЗаказу.Подразделение,
	|	МатериалыКЗаказу.ГруппаПродукции,
	|	МатериалыКЗаказу.НачалоОтгрузки,
	|	МатериалыКЗаказу.Склад,
	|	МатериалыКЗаказу.ЦеховаяКладовая,
	|	МатериалыКЗаказу.ВариантОбеспечения КАК ВариантОбеспечения,
	|	МатериалыКЗаказу.Назначение,
	|	ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) КАК КоличествоУпаковокЗаказано,
	|	ЕСТЬNULL(ВТЗаказы.Количество, 0) КАК КоличествоЗаказано,
	//|	МатериалыКЗаказу.КоличествоУпаковок КАК КоличествоУпаковокЗаказано,
	//|	МатериалыКЗаказу.Количество КАК КоличествоЗаказано,
	|	МатериалыКЗаказу.КоличествоУпаковок - ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) КАК КоличествоУпаковокЗаказать,
	|	МатериалыКЗаказу.Количество - ЕСТЬNULL(ВТЗаказы.Количество, 0) КАК КоличествоЗаказать,
	|	ВЫБОР
	|		КОГДА МатериалыКЗаказу.КоличествоУпаковок - ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выбран
	|ИЗ
	|	МатериалыКЗаказу КАК МатериалыКЗаказу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказы КАК ВТЗаказы
	|		ПО МатериалыКЗаказу.Номенклатура = ВТЗаказы.Номенклатура
	|			И МатериалыКЗаказу.Характеристика = ВТЗаказы.Характеристика
	|			И МатериалыКЗаказу.Подразделение = ВТЗаказы.Подразделение
	|			И МатериалыКЗаказу.ГруппаПродукции = ВТЗаказы.ГруппаПродукции
	|			И (&УчитыватьСуществующиеЗаказы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТаблицаМатериалов",             ТаблицаМатериалов); 
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("ГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"));
	Товары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Товары.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Товары.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Товары.Колонки.Добавить("НачалоОтгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Товары.Колонки.Добавить("ОкончаниеПоступления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекСтр = Товары.Добавить();
	
	Заливка = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Номенклатура", "674382b3-6163-11ec-a227-ac1f6be2fed5"); //Заливка (смесь);
	Печь1 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "556062b7-6185-11ec-a227-ac1f6be2fed5"); //ПЕЧЬ1	
	ТекСтр.Номенклатура = Заливка;
	//Товары.Упаковка = ТекСтр.Упаковка);
	ТекСтр.Склад = Объект.ЦеховаяКладовая;
	ТекСтр.Характеристика = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("ХарактеристикиНоменклатуры", 
	"75a96e2a-6171-11ec-a227-ac1f6be2fed5");// Высший сорт
	//ТекСтр.Количество = 1;
	//ТекСтр.КоличествоУпаковок = 0;
	ТекСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ТекСтр.НачалоОтгрузки = Объект.Дата;
	ТекСтр.ОкончаниеПоступления = Объект.Дата;
	
	Запрос.УстановитьПараметр("Товары",                        Товары);
	Запрос.УстановитьПараметр("СписокЗаказов",                 СформированныеДокументы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("УчитыватьСуществующиеЗаказы",   УчитыватьСуществующиеЗаказы);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",             НачалоТекущегоДня);
	
	Результат = Запрос.Выполнить();
	
	Объект.Материалы.Загрузить(Результат.Выгрузить());
	
	
	Действия = Новый Структура();
	Действия.Вставить(
	"ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	Действия.Вставить(
	"ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Материалы,
	Действия);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМатериалыУровня(СтрокаДерева, ТаблицаМатериалов, Отказ = Ложь)
	
	ТекущиеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого Строка Из ТекущиеСтроки Цикл
		
		Если Строка.Выбран > 0 Тогда
			
			Если Строка.ПроизводитсяВПроцессе И Не ЗначениеЗаполнено(Строка.Спецификация) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле Спецификация не заполнено'"),
				,
				"ПолуфабрикатыИМатериалы",
				,
				Отказ);
				
			КонецЕсли;
			
			Если Не Строка.ПроизводитсяВПроцессе Тогда
				
				Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле Склад не заполнено'"),
					,
					"ПолуфабрикатыИМатериалы",
					,
					Отказ);
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле Подразделение не заполнено'"),
					,
					"ПолуфабрикатыИМатериалы",
					,
					Отказ);
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьМатериалыУровня(Строка, ТаблицаМатериалов, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьМатериалыКЗаказу(Отметить, МассивСтрок)
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ДанныеСтроки = Объект.Материалы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.Выбран = Отметить;
		
		Если ДанныеСтроки.Выбран Тогда
			ДанныеСтроки.КоличествоУпаковокЗаказать = ДанныеСтроки.КоличествоУпаковок - ДанныеСтроки.КоличествоУпаковокЗаказано;
			ДанныеСтроки.КоличествоЗаказать = ДанныеСтроки.Количество - ДанныеСтроки.КоличествоЗаказано;
		Иначе
			ДанныеСтроки.КоличествоУпаковокЗаказать = 0;
			ДанныеСтроки.КоличествоЗаказать = 0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбновитьЗаказы = Истина;
	
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьПрошлыеЗаказыПриИзмененииНаСервере()
	
	УдалитьСформированныеДокументы();
	
	Если УчитыватьСуществующиеЗаказы Тогда
		ЗаполнитьМатериалыНаСервере();
	Иначе
		
		Для Каждого Строка Из Объект.Материалы Цикл
			
			Строка.КоличествоУпаковокЗаказано = 0;
			Строка.КоличествоЗаказано = 0;
			
			Строка.КоличествоУпаковокЗаказать = Строка.КоличествоУпаковок;
			Строка.КоличествоЗаказать = Строка.Количество;
			
			Строка.Выбран = Строка.КоличествоУпаковокЗаказать > 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументов

&НаСервере
Процедура СформироватьЗаказыНаСервере()
	
	Перем ТекСклад, ТекПодразделение, ТекКладовая, ДокОбъект, ЖелаемаяДатаОтгрузки, ДатаОтгрузки, НеОтгружатьЧастями;
	
	УдалитьСформированныеДокументы();
	
	ТаблицаМатериалов = Объект.Материалы.Выгрузить(Новый Структура("Выбран", Истина));
	ТаблицаМатериалов.Сортировать("Склад, Подразделение");
	
	РеквизитыШапки = Новый Структура("Дата, Статус, ЖелаемаяДатаОтгрузки, Организация, Подразделение, ЦеховаяКладовая, НаправлениеДеятельности,
	|Склад, ХозяйственнаяОперация, ДатаОтгрузки, ДокументОснование, НеОтгружатьЧастями, НеЗаполнятьВариантОбеспеченияПоУмолчанию");
	
	ТаблицаТовары = ТаблицаМатериалов.СкопироватьКолонки("Номенклатура, Характеристика, Назначение, 
	|Упаковка, КоличествоУпаковок, Количество, НачалоОтгрузки, ВариантОбеспечения, ГруппаПродукции");
	ТаблицаТовары.Колонки.Добавить("ОкончаниеПоступления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	СообщенияОбОшибках = Новый Массив;
	СоответствиеЗаказов = Новый Соответствие;
	
	ДатаНовыхДокументов = ТекущаяДатаСеанса();
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		Если ТекСклад <> Строка.Склад 
			Или ТекПодразделение <> Строка.Подразделение 
			И НЕ УправлениеПроизводством2_2
			Или ТекКладовая <> Строка.ЦеховаяКладовая
			И УправлениеПроизводством2_2 Тогда
			
			Если ДокОбъект <> Неопределено Тогда
				
				РеквизитыШапки.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
				РеквизитыШапки.ДатаОтгрузки         = ДатаОтгрузки;
				РеквизитыШапки.НеОтгружатьЧастями   = НеОтгружатьЧастями;
				
				ТаблицаТовары.Сортировать("Номенклатура, НачалоОтгрузки");
				ДанныеЗаполнения = Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, ТаблицаТовары);
				ДокОбъект.Заполнить(ДанныеЗаполнения);
				ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
				
				СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
				
			КонецЕсли;
			
			ЖелаемаяДатаОтгрузки = Неопределено;
			ДатаОтгрузки = Неопределено;
			НеОтгружатьЧастями = Истина;
			
			ТаблицаТовары.Очистить();
			
			ДокОбъект = Документы.ЗаказМатериаловВПроизводство.СоздатьДокумент();
			ДокОбъект.УстановитьСсылкуНового(Документы.ЗаказМатериаловВПроизводство.ПолучитьСсылку(Новый УникальныйИдентификатор));
			
			РеквизитыШапки.Организация = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Организации", "96bb4f3f-9f2f-11e9-90f2-d850e65181da");
			ЗаполнитьЗначенияСвойств(РеквизитыШапки, Строка, "Подразделение, Склад, ЦеховаяКладовая");
			РеквизитыШапки.Дата                  = ДатаНовыхДокументов; 
			РеквизитыШапки.Статус                = Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению;
			РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
			
			ТекСклад         = Строка.Склад;
			ТекПодразделение = Строка.Подразделение;
			ТекКладовая      = Строка.ЦеховаяКладовая;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ОкончаниеПоступления = Строка.НачалоОтгрузки;
		
		Если Строка.Выбран Тогда
			Строка.КоличествоУпаковокЗаказать = Строка.КоличествоУпаковок - Строка.КоличествоУпаковокЗаказано;
			Строка.КоличествоЗаказать = Строка.Количество - Строка.КоличествоЗаказано;
		Иначе
			Строка.КоличествоУпаковокЗаказать = 0;
			Строка.КоличествоЗаказать = 0;
		КонецЕсли;
		
		НоваяСтрока.Количество = Строка.КоличествоЗаказать;
		НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковокЗаказать;
		
		Если ЖелаемаяДатаОтгрузки = Неопределено Тогда
			ЖелаемаяДатаОтгрузки = Строка.НачалоОтгрузки;
		Иначе
			ЖелаемаяДатаОтгрузки = Мин(ЖелаемаяДатаОтгрузки, Строка.НачалоОтгрузки);
		КонецЕсли;
		
		Если ДатаОтгрузки = Неопределено Тогда
			ДатаОтгрузки = Строка.НачалоОтгрузки;
		КонецЕсли;
		
		Если ДатаОтгрузки <> Строка.НачалоОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
		КонецЕсли;
		
		СоответствиеЗаказов.Вставить(Строка.НомерСтроки, ДокОбъект.ПолучитьСсылкуНового());
		
	КонецЦикла;
	
	Если ДокОбъект <> Неопределено Тогда
		
		РеквизитыШапки.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
		РеквизитыШапки.ДатаОтгрузки         = ДатаОтгрузки;
		РеквизитыШапки.НеОтгружатьЧастями   = НеОтгружатьЧастями;
		
		ТаблицаТовары.Сортировать("Номенклатура, НачалоОтгрузки");
		ДанныеЗаполнения = Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, ТаблицаТовары);
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		
		ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
		
		ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
		
		ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
		ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Бригада");
		НоваяСтрока.Значение = Объект.Бригада.Наименование;
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокОбъект.Ссылка, ЗначенияДополнительныхРеквизитов);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Назначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Заказ = &Заказ";
		
		Запрос.УстановитьПараметр("Заказ", ДокОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Назначение = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
		
	КонецЕсли;
	
	//Если СформированныеДокументы.Количество() > 0 Тогда
	//	//ЗаказыСформированы = Истина;
	//	ОбновитьЗаказы = Ложь;
	//КонецЕсли;
	
	Для Каждого Сообщение Из СообщенияОбОшибках Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Материалы Цикл
		
		Строка.Заказ = СоответствиеЗаказов[Строка.НомерСтроки];
		
		Строка.КоличествоУпаковокЗаказано = Строка.КоличествоУпаковокЗаказано + Строка.КоличествоУпаковокЗаказать;
		Строка.КоличествоЗаказано = Строка.КоличествоЗаказано + Строка.КоличествоЗаказать;
		
		Строка.КоличествоУпаковокЗаказать = 0;
		Строка.КоличествоЗаказать = 0;
		
		Строка.Выбран = Ложь;
		
	КонецЦикла;  
	
	ИмяНакладной = "ДвижениеПродукцииИМатериалов";
	Распоряжения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокОбъект.Ссылка);
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
	
	ДокОбъект = Документы.ДвижениеПродукцииИМатериалов.СоздатьДокумент();
	ДокОбъект.УстановитьСсылкуНового(Документы.ДвижениеПродукцииИМатериалов.ПолучитьСсылку(Новый УникальныйИдентификатор));
	
	ДанныеДляПроверки = Документы[ИмяНакладной].ДанныеДляПроверкиВводаНаОсновании(Распоряжения, ХозяйственнаяОперация);
	
	Если ЗначениеЗаполнено(ДанныеДляПроверки.Основание) Тогда
		
		// Проверка статуса
		ДопустимыеСтатусы = Документы[ДанныеДляПроверки.Основание.Метаданные().Имя].ДопустимыеСтатусыВводаНаОсновании(ИмяНакладной);
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ДанныеДляПроверки.Основание, ДанныеДляПроверки.Статус, Ложь,
		ДопустимыеСтатусы.Найти(ДанныеДляПроверки.Статус) = Неопределено, ДопустимыеСтатусы);
		
		// Проверка действий
		Если Не ДанныеДляПроверки.ЕстьОтгрузить Тогда
			ВызватьИсключение ОбеспечениеСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки()
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляПроверки.РаспоряженияКОформлению) Тогда
		ВызватьИсключение НСтр("ru='Нет свободных остатков к оформлению. Ввод на основании невозможен.'");
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы[ИмяНакладной].ПараметрыЗаполненияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ДанныеДляПроверки);
	РеквизитыШапки = Документы[ИмяНакладной].ДанныеЗаполненияНакладной(ДанныеДляПроверки.РаспоряженияКОформлению,
	ДанныеДляПроверки);
	Документы[ИмяНакладной].ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки,
	ДанныеДляПроверки.РаспоряженияКОформлению);  
	
	ДокОбъект.Заполнить(ПараметрыЗаполнения);
	ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
	
	СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
	
	ДокОбъект = Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
	ДокОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям;
	ДокОбъект.УстановитьСсылкуНового(Документы.ПроизводствоБезЗаказа.ПолучитьСсылку(Новый УникальныйИдентификатор));
	ДокОбъект.Заполнить(ПараметрыЗаполнения);
	МатериалыИРаботы = ДокОбъект.МатериалыИРаботы.Добавить();
	МатериалыИРаботы.Номенклатура = Назначение;
	МатериалыИРаботы.Назначение = Назначение;

	Заливка = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Номенклатура", "674382b3-6163-11ec-a227-ac1f6be2fed5"); //Заливка (смесь)
	
	Трудозатраты = ДокОбъект.Трудозатраты.Добавить();
	Трудозатраты.Исполнитель = Объект.Бригада;
	
	ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
	СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокДокументов,
	"Ссылка",
	СформированныеДокументы,
	ВидСравненияКомпоновкиДанных.ВСписке,
	,
	Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках)
	
	Если ДокОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание заказов на передачу в производство'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		Ошибка.КлючДанных = ДокОбъект.Ссылка;
		СообщенияОбОшибках.Добавить(Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСформированныеДокументы()
	
	СформированныеДокументы.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	МассивСсылокНаУдаление = СформированныеДокументы.ВыгрузитьЗначения();
	СписокОшибок           = ОбщегоНазначенияУТ.УдалитьДокументы(МассивСсылокНаУдаление);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	ЗаказыСформированы = Ложь;
	ОбновитьЗаказы = Истина;
	
	СформированныеДокументы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыНаСервере()
	УдалитьСформированныеДокументы();
	ЗаполнитьМатериалыНаСервере();
	Элементы.СписокДокументов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	Кладовая1 = ИнтерфейсРаботникаСклада.ПолучитьСсылкуПоГуид("Склады", "1eb17a6c-bb4d-11ea-85c1-d850e65181da"); //Кладовая 1 (старая линия)
	
	ОтчетПоОстаткамТоваров.Очистить();
	Отчет = Отчеты.ВедомостьПоТоварамНаСкладах1.Создать(); 
	
	НастройкиОтчета = Отчет.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;
	//
	//МассивПолей = Новый Массив;
	//МассивПолей.Добавить("Номенклатура.Артикул");
	//
	//Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
	//	
	//	Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
	//		Если МассивПолей.Найти(Строка(ВыбранноеПоле.Поле)) <> Неопределено Тогда
	//			ВыбранноеПоле.Использование = Ложь;
	//		КонецЕсли;            
	//	КонецЕсли;        
	//	
	//КонецЦикла;
	//
	//Кладовые = Справочники.Склады.НайтиПоНаименованию("Кладовые");
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, "Склад", 
	//Кладовые, ВидСравненияКомпоновкиДанных.ВИерархии,, Истина);
	//ПараметрыВывода = НастройкиОтчета.ПараметрыВывода;
	//ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	//ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	//ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	//ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	
	Отчет.СкомпоноватьРезультат(ОтчетПоОстаткамТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СформироватьОтчетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦеховаяКладоваяПриИзменении(Элемент)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	
	Для каждого Строка Из Строки Цикл
		
		СтрокаРодитель = Строка.ПолучитьРодителя();
		
		Если СтрокаРодитель = Неопределено Тогда
			ПолуфабрикатыИМатериалы.ПолучитьЭлементы().Удалить(Строка);
		Иначе
			СтрокаРодитель.ПолучитьЭлементы().Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуПродукцииНаСервере(); 
	
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(1);
	КонецЕсли;  
	
	ЗаполнитьМатериалыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеховаяКладоваяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БригадаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	НачалоТекущегоДня = Объект.Дата;
КонецПроцедуры



#КонецОбласти

#КонецОбласти
